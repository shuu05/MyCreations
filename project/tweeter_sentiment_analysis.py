# -*- coding: utf-8 -*-
"""Tweeter sentiment analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tdj6HzHgBhIRqc9BLRJEnEaerrkw5F-h
"""

# Commented out IPython magic to ensure Python compatibility.
import tweepy
from textblob import TextBlob
from wordcloud import WordCloud
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
# %matplotlib inline

plt.style.use('fivethirtyeight')

consumerkey='cZ6vrfi5xN7a0bJYSWzxVgHt4'
consumersecret='EuodJCHst8xTo75QXRicsZw8h1vG1SM8TomPevReX3v8u0nhHO'
accesstoken='1374457787896401921-4ildIH69y1WJdKa4pTSG1mgac3ITCx'
accesskey='jW3Zi9iw1mdHziYk5bf0hnb4L4ASVQ5bh24EYIVqH1OeY'

#authentication object
authenticate = tweepy.OAuthHandler(consumer_key=consumerkey,consumer_secret=consumersecret)

#access token
authenticate.set_access_token(accesstoken, accesskey)

#creating api object
api = tweepy.API(authenticate,wait_on_rate_limit=True)

#extract 100 tweets from tweeter user
posts = api.user_timeline(screen_name="BillGates", count=100, lang="en", tweet_mode="extended")

#print last 5 tweets from above account
print("5 recent tweets: \n")
for tweet in posts[0:5]:
  print(tweet.full_text + '\n')

df = pd.DataFrame([tweet.full_text for tweet in posts], columns=['Tweets'])
df.head()

"""# cleaning the text"""

def clean_txt(text):
  text = re.sub(r'@[A-Za-z0-9]+','', text)
  text = re.sub(r'#','',text)
  text = re.sub(r'RT[\s]+','',text)
  text = re.sub(r'https?:\/\/\S','',text)
  return text

df['Tweets'] = df['Tweets'].apply(clean_txt)
df

# creating the function to get the subjectivity
def get_subjectivity(text):
  return TextBlob(text).sentiment.subjectivity


# creating function to get the polarity

def get_polarity(text):
  return TextBlob(text).sentiment.polarity

# creating two new columns

df['Subjectivity'] = df['Tweets'].apply(get_subjectivity)
df['Polarity'] = df['Tweets'].apply(get_polarity)

df

# plotting word cloud
allwords = ' '.join([twts for twts in df['Tweets']])
wordCloud = WordCloud(background_color='black',mode="RGB", width=800, height=800, random_state=21, max_font_size=110).generate(allwords)

plt.imshow(wordCloud, interpolation="bilinear")
plt.axis('off')
plt.show()

# function to compute positive,negative,neutral analysis

def get_analysis(score):
  if score < 0:
    return 'Negative'
  elif score == 0:
    return 'Neutral'
  else:
    return 'Positive'


df['Analysis'] = df['Polarity'].apply(get_analysis)


df

# print all positive tweets

j = 1
sortedDf = df.sort_values(by=['Polarity'])
for i in range(0, sortedDf.shape[0]):
  if (sortedDf['Analysis'][i] == 'Positive'):
    print(str(j)+') '+sortedDf['Tweets'][i])
    print()
    j += 1

# printing negative tweeets

j=1
sortedDf = df.sort_values(by=['Polarity'],ascending=False)
for i in range(0, sortedDf.shape[0]):
  if(sortedDf['Analysis'][i] == 'Negative'):
    print(str(j)+') '+sortedDf['Tweets'][i])
    print()
    j += 1

# printing neutral tweeets

j=1
sortedDf = df.sort_values(by=['Polarity'],ascending=False)
for i in range(0, sortedDf.shape[0]):
  if(sortedDf['Analysis'][i] == 'Neutral'):
    print(str(j)+') '+sortedDf['Tweets'][i])
    print()
    j += 1

# plot the polarity and subjectivity
plt.figure(figsize=(8,6))
for i in range(0, sortedDf.shape[0]):
  plt.scatter(df['Polarity'][i],df['Subjectivity'][i],color='Blue')
plt.title('Sentiment Analysis')
plt.xlabel('polarity')
plt.ylabel('subjectivity')
plt.show()

ptweets = df[df['Analysis'] == 'Positive']
ptweets = ptweets['Tweets']
ptweets

round((ptweets.shape[0]/df.shape[0])*100, 1)

ntweets = df[df['Analysis'] == 'Negative']
ntweets = ntweets['Tweets']
round((ntweets.shape[0]/df.shape[0])*100, 1)

nutweets = df[df['Analysis'] == 'Neutral']
nutweets = nutweets['Tweets']
round((nutweets.shape[0]/df.shape[0])*100, 1)

df['Analysis'].value_counts()

plt.title("sentiment Analysis")
plt.xlabel('sentiment')
plt.ylabel('counts')
df['Analysis'].value_counts().plot(kind='bar')
plt.show()

